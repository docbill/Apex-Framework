export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "BooleanValuesHelper",
        "fileName": "BooleanValuesHelper.html",
        "text": "BooleanValuesHelper This is a set of utilities for treating boolean metadata a a map. @version 2022-08-06 Signature public without sharing class BooleanValuesHelper Bill Riemers <briemers@redhat.com>2020-12-02 - Created 2021-01-29 - Allow ignoreMetadata per instance 2021-02-13 DE25830 - Fix to make sure maps are per helper instance 2021-04-27 US292962 - No longer create missing metadata 2021-09-21 - User legacyMap instead of BooleanSetting__c 2022-08-06 - Trigger Management Entries Active flags will be treated as Boolean Metadata BooleanValuesHelper Properties Name Signature Description booleanHierarchyInstance public static BooleanHierarchy__c booleanHierarchyInstance booleanMap public Map<String,Boolean> booleanMap This is the map of data obtained from the BooleanMetadata__mdt table with BooleanHierarchy overrides. booleanMapFromDefaults private Map<String,Boolean> booleanMapFromDefaults booleanMapFromMetadata private Map<String,Boolean> booleanMapFromMetadata booleanSettingMap public static final Map<String,Boolean> booleanSettingMap This mapping will be automatically populated by use of the getValue method. booleanSettingMapFromDefaults private static Map<String,Boolean> booleanSettingMapFromDefaults booleanSettingMapFromMetadata private static Map<String,Boolean> booleanSettingMapFromMetadata booleanValuesHelperMaps private static Map<Boolean,Map<String,BooleanValuesHelper>> booleanValuesHelperMaps ignoreMetadata private final Boolean ignoreMetadata legacyMap public static Map<String,Boolean> legacyMap missingMap public static Map<String,Boolean> missingMap overrideSettingMap public static final Map<String,Boolean> overrideSettingMap This is a mapping of overrides. set private set source private final String source sourceWithSuffix private final String sourceWithSuffix useTestingDefaults public static Boolean useTestingDefaults Setting to deactivate the use of boolean metadata in a test class. useTestingDefaultsSaveVersion private Integer useTestingDefaultsSaveVersion useTestingDefaultsVersion private static Integer useTestingDefaultsVersion BooleanValuesHelper Constructors BooleanValuesHelper(source, ignoreMetadata) Constructor BooleanValuesHelper(source, ignoreMetadata) Constructor Signature private BooleanValuesHelper(String source,Boolean ignoreMetadata) Parameters source Type: String BooleanValuesHelper Methods getBooleanMap(ignoreMetadata) Query the map from the BooleanMetadata__mdt table.  Each value maybe overwritten by a BooleanHierarchy__c field with the field name matching the developer name. getBooleanSettingMap(ignoreMetadata) getBooleanValue(defaultValue) Check if a trigger is active by referencing the booleanSettingMap.  If an entry does not exist in the map, one will be add by referencing legacyMap. getBooleanValue(defaultValue, ignoreMetadata) Check if a trigger is active by referencing the booleanSettingMap.  If an entry does not exist in the map, one will be add by referencing legacyMap. getBooleanValuesHelper(source, ignoreMetadata) Factory method to get a boolean values helper. getBooleanValuesHelper(source) Factory method to get a boolean values helper. getKey(sourceWithSuffix, key) getValue(defaultValue) Check if a trigger is active by referencing the booleanSettingMap.  If an entry does not exist in the map, one will be add by referencing legacyMap. setValuesWhichStartWith(prefix, value) Used to set override for all matching settings is the map to the specified value. suffixWith(source, suffix, blankValue) getBooleanMap(ignoreMetadata) Query the map from the BooleanMetadata__mdt table.  Each value maybe overwritten by a BooleanHierarchy__c field with the field name matching the developer name. Signature public static Map<String,Boolean> getBooleanMap(final String source,Boolean ignoreMetadata) Parameters source ignoreMetadata Type: final String source,Boolean when true ignore the values, but not the existance Returns map getBooleanSettingMap(ignoreMetadata) Signature private static Map<String,Boolean> getBooleanSettingMap(Boolean ignoreMetadata) getBooleanValue(defaultValue) Check if a trigger is active by referencing the booleanSettingMap.  If an entry does not exist in the map, one will be add by referencing legacyMap. Signature public static Boolean getBooleanValue(final String name,Boolean defaultValue) Parameters name the name of the boolean setting defaultValue Type: final String name,Boolean the value to return if null Returns the value in the map or the defaultValue getBooleanValue(defaultValue, ignoreMetadata) Check if a trigger is active by referencing the booleanSettingMap.  If an entry does not exist in the map, one will be add by referencing legacyMap. Signature public static Boolean getBooleanValue(final String name,Boolean defaultValue,Boolean ignoreMetadata) Parameters name the name of the boolean setting defaultValue Type: final String name,Boolean the value to return if null ignoreMetadata when true we ignore the value not the existance of metadata Returns the value in the map or the defaultValue getBooleanValuesHelper(source, ignoreMetadata) Factory method to get a boolean values helper. Signature public static BooleanValuesHelper getBooleanValuesHelper(String source,Boolean ignoreMetadata) Parameters source Type: String Returns the boolean values helper getBooleanValuesHelper(source) Factory method to get a boolean values helper. Signature public static BooleanValuesHelper getBooleanValuesHelper(String source) Parameters source Type: String Returns the boolean values helper getKey(sourceWithSuffix, key) Signature @TestVisible static String getKey(String sourceWithSuffix,String key) getValue(defaultValue) Check if a trigger is active by referencing the booleanSettingMap.  If an entry does not exist in the map, one will be add by referencing legacyMap. Signature public Boolean getValue(final String key,Boolean defaultValue) Parameters key of the boolean setting defaultValue Type: final String key,Boolean the value to return if null Returns the value in the map or the defaultValue setValuesWhichStartWith(prefix, value) Used to set override for all matching settings is the map to the specified value. Signature public static void setValuesWhichStartWith(String prefix,Boolean value) Parameters prefix Type: String the names to match. e.g. Account_Before. value the value to set(a null value resets the override) suffixWith(source, suffix, blankValue) Signature static String suffixWith(String source,String suffix,String blankValue)"
    },
    {
        "title": "BooleanValuesHelperTest",
        "fileName": "BooleanValuesHelperTest.html",
        "text": "BooleanValuesHelperTest Test class for Metadata Values Helper @version 2021-09-21 Signature @IsTest private class BooleanValuesHelperTest Bill C Riemers <briemers@redhat.com>2020-12-02 - Created 2021-01-29 - Update for allow ignoreMetadata per instance 2021-04-27 US292962 - No longer create missing boolean metadata 2021-09-21 - legacyMap test instead of booleanSettingsTest BooleanValuesHelperTest Properties Name Signature DEFAULT_KEY1 static final String DEFAULT_KEY1 DEFAULT_KEY2 static final String DEFAULT_KEY2 FALSE_KEY1 static final String FALSE_KEY1 FALSE_KEY2 static final String FALSE_KEY2 helperGlobal static BooleanValuesHelper helperGlobal helperTest static BooleanValuesHelper helperTest missingMap static final Map<String,Boolean> missingMap TEST_DEFAULT_KEY1 static final String TEST_DEFAULT_KEY1 TEST_DEFAULT_KEY2 static final String TEST_DEFAULT_KEY2 TEST_FALSE_KEY1 static final String TEST_FALSE_KEY1 TEST_FALSE_KEY2 static final String TEST_FALSE_KEY2 TEST_TRUE_KEY1 static final String TEST_TRUE_KEY1 TEST_TRUE_KEY2 static final String TEST_TRUE_KEY2 TRUE_KEY1 static final String TRUE_KEY1 TRUE_KEY2 static final String TRUE_KEY2 BooleanValuesHelperTest Methods booleanHierarchyTest() booleanMetadataTest() getBooleanValueTest() legacyMapTest() booleanHierarchyTest() Signature @isTest static void booleanHierarchyTest() booleanMetadataTest() Signature @isTest static void booleanMetadataTest() getBooleanValueTest() Signature @isTest static void getBooleanValueTest() legacyMapTest() Signature @isTest static void legacyMapTest()"
    },
    {
        "title": "DatabaseHelper",
        "fileName": "DatabaseHelper.html",
        "text": "DatabaseHelper This Class implements some useful database utilities.  Many copied from TestDataFactory.  It is pretty dangerious to use these in code, but sometimes you need to deactivate triggers to repair or migrate data.   So these are available to call from anonymous apex... @version 2021-10-27 @todo update TestDataFactory to call this class, rather than having a duplicate implementation. Signature public with sharing class DatabaseHelper Bill C Riemers <briemers@redhat.com>2020-08-19 US266008 - Added governor limit checks 2021-01-07 US281262 - Added setEnqueueScope for Queuable splitting of dml 2021-01-27 workaround stack trace bug 2021-02-11 initCause on exceptions 2021-03-24 lock on DatabaseHelper.class.getName() when enqueueJob is called 2021-03-24 remember in queueable instance boolean values 2021-04-27 DE26549 - Increment queue counter 2021-10-27 US307550 - Fixed enqueueing multiple dml calls DatabaseHelper Properties Name Signature Description checkLimits private Boolean checkLimits deactivateTriggers private Boolean deactivateTriggers enqueueScope private Integer enqueueScope externalIDField private Schema.SObjectField externalIDField legacyMode private Boolean legacyMode MINIMUM_TIME_PER_DML private static final Integer MINIMUM_TIME_PER_DML This is just a wiled guess at the minimum numer of ms we should reserve for a DML Statement. options private Database.DMLOptions options Enums Name Signature Values Description DMLOperation public enum DMLOperation INSERT_OP, UPDATE_OP, UPSERT_OP, DELETE_OP, UNDELETE_OP Used internally. DatabaseHelper Constructors DatabaseHelper() Standard Constructor. DatabaseHelper() Standard Constructor. Signature public DatabaseHelper() DatabaseHelper Methods addStackTraceString(results, cause) assignOptions(recordList) We cannot pass the options to an upsert operation, so a workaround is to assign the options to all the records. convertException(op, ex, recordIterator) dmlStatement(op, recordList) This performs a database operation, with optional limit checks.  If a limit is hit a custom LimitException is thrown. getEnqueueScope() Retrieve value set for enqueueScope. getErrors(result) Method to get errors with out depending on the type of database results. isSuccess(result) Method to check success with out depending on the type of database results. legacyDelete(recordList) Called to delete the recordList. legacyInsert(recordList) Called to insert the recordList. legacyUndelete(recordList) Called to undelete the recordList. legacyUpdate(recordList) Called to update the recordList. legacyUpsert(recordList) Called to upsert the recordList. safeDelete(recordList) Called to delete the recordList. safeInsert(recordList) Called to insert the recordList. safeUndelete(recordList) Called to undelete the recordList. safeUpdate(recordList) Called to update the recordList. safeUpsert(recordList) Called to upsert the recordList. setAllowFieldTruncation(value) Set the allowFieldTruncation flag on the dmlOptions. setCheckLimits(value) Called to change the check limits property. A setCheckLimits(null) is equivalent to the setCheckLimits(LimitHelper.throwsExceptionDefault) immediatly prior to the dml operation. We only throw the limit exception if optAllOrNothing is true. setDeactivateTriggers(value) Set to disable all triggers that use the Deactivate all triggers that use an isActive check on the DeactivateAll boolean metadata. setEnqueueScope(value) Setting this value causes the dml operation to be performed as a chain of queueable jobs.  Each job performing the dml on the number of records specified. A negative value means only the overflow records of the first grouping will be processed in a queueable job. setExternalIDField(value) Set the external id field to use in an upsert. setOptAllOrNone(value) Set the OptAllOrNone flag on the dmlOptions. setOptions(value) Set the dmlOptions. split(records, size) Splits a list into smaller lists no greate than size. If size is negative the first list in the returned array will be empty. addStackTraceString(results, cause) Signature @TestVisible static List<String> addStackTraceString(List<String> results,Exception cause) assignOptions(recordList) We cannot pass the options to an upsert operation, so a workaround is to assign the options to all the records. Signature public DatabaseHelper assignOptions(List<SObject> recordList) Parameters recordList Type: List<SObject> Returns this convertException(op, ex, recordIterator) Signature private List<Object> convertException(DMLOperation op,Exception ex,Iterator<SObject> recordIterator) dmlStatement(op, recordList) This performs a database operation, with optional limit checks.  If a limit is hit a custom LimitException is thrown. Signature public List<Object> dmlStatement(        DMLOperation op,        List<SObject> recordList ) Parameters op Type:         DMLOperation dml operation to perform recordList Type:        List<SObject> to insert getEnqueueScope() Retrieve value set for enqueueScope. Signature public Integer getEnqueueScope() Returns enqueueScope getErrors(result) Method to get errors with out depending on the type of database results. Signature public static List<Database.Error> getErrors(Object result) Parameters result Type: Object from a insert,update,upsert,delete,or undelete Returns a list of database errors isSuccess(result) Method to check success with out depending on the type of database results. Signature public static Boolean isSuccess(Object result) Parameters result Type: Object from a insert,update,upsert,delete,or undelete Returns true if success legacyDelete(recordList) Called to delete the recordList. Signature public List<Database.DeleteResult> legacyDelete(List<SObject> recordList) Parameters recordList Type: List<SObject> Returns result list legacyInsert(recordList) Called to insert the recordList. Signature public List<Database.SaveResult> legacyInsert(List<SObject> recordList) Parameters recordList Type: List<SObject> Returns result list legacyUndelete(recordList) Called to undelete the recordList. Signature public List<Database.UndeleteResult> legacyUndelete(List<SObject> recordList) Parameters recordList Type: List<SObject> Returns result list legacyUpdate(recordList) Called to update the recordList. Signature public List<Database.SaveResult> legacyUpdate(List<SObject> recordList) Parameters recordList Type: List<SObject> Returns result list legacyUpsert(recordList) Called to upsert the recordList. Signature public List<Database.UpsertResult> legacyUpsert(List<SObject> recordList) Parameters recordList Type: List<SObject> Returns result list safeDelete(recordList) Called to delete the recordList. Signature public List<Result> safeDelete(List<SObject> recordList) Parameters recordList Type: List<SObject> Returns result list safeInsert(recordList) Called to insert the recordList. Signature public List<Result> safeInsert(List<SObject> recordList) Parameters recordList Type: List<SObject> Returns result list safeUndelete(recordList) Called to undelete the recordList. Signature public List<Result> safeUndelete(List<SObject> recordList) Parameters recordList Type: List<SObject> Returns result list safeUpdate(recordList) Called to update the recordList. Signature public List<Result> safeUpdate(List<SObject> recordList) Parameters recordList Type: List<SObject> Returns result list safeUpsert(recordList) Called to upsert the recordList. Signature public List<Result> safeUpsert(List<SObject> recordList) Parameters recordList Type: List<SObject> Returns result list setAllowFieldTruncation(value) Set the allowFieldTruncation flag on the dmlOptions. Signature public DatabaseHelper setAllowFieldTruncation(Boolean value) Parameters value Type: Boolean Returns this setCheckLimits(value) Called to change the check limits property. A setCheckLimits(null) is equivalent to the setCheckLimits(LimitHelper.throwsExceptionDefault) immediatly prior to the dml operation. We only throw the limit exception if optAllOrNothing is true. Signature public DatabaseHelper setCheckLimits(Boolean value) Parameters value Type: Boolean if true we should check the limits. Returns this setDeactivateTriggers(value) Set to disable all triggers that use the Deactivate all triggers that use an isActive check on the DeactivateAll boolean metadata. Signature public DatabaseHelper setDeactivateTriggers(Boolean value) Parameters value Type: Boolean Returns this setEnqueueScope(value) Setting this value causes the dml operation to be performed as a chain of queueable jobs.  Each job performing the dml on the number of records specified. A negative value means only the overflow records of the first grouping will be processed in a queueable job. Signature public DatabaseHelper setEnqueueScope(Integer value) Parameters value Type: Integer Returns this setExternalIDField(value) Set the external id field to use in an upsert. Signature public DatabaseHelper setExternalIDField(Schema.SObjectField value) Parameters value Type: Schema.SObjectField Returns this setOptAllOrNone(value) Set the OptAllOrNone flag on the dmlOptions. Signature public DatabaseHelper setOptAllOrNone(Boolean value) Parameters value Type: Boolean Returns this setOptions(value) Set the dmlOptions. Signature public DatabaseHelper setOptions(Database.DMLOptions value) Parameters value Type: Database.DMLOptions Returns this split(records, size) Splits a list into smaller lists no greate than size. If size is negative the first list in the returned array will be empty. Signature @TestVisible static List<List<SObject>> split(List<SObject> records,Integer size) Parameters records Type: List<SObject> list to split size the number of records per list DatabaseHelper.Result This is a class that can use to in leiu of the Database.*Result objects. That way we can add to this set exceptions that were never actually thrown and such. Signature public interface Result DatabaseHelper.Result Methods convertResult(apexType) Convert the result to a different type. getErrors() This returns all errors as Database.Error type. getException() Return just the first exception as DatabaseHelper.ResultException type. getExceptions() This returns all errors as DatabaseHelper.ResultException type. getId() What is the id value we operated on? getSObject() Find the record we operated on. getStackTraceStrings() Query a list of stack traces for each exception. isCreated() Test this was an insert or an upsert that created a record. isSuccess() Was the DML successful? convertResult(apexType) Convert the result to a different type. Signature Object convertResult(System.Type apexType) Parameters apexType Type: System.Type Returns converted result getErrors() This returns all errors as Database.Error type. Signature List<Database.Error> getErrors() Returns list of all errors getException() Return just the first exception as DatabaseHelper.ResultException type. Signature ResultException getException() Returns the first exception or null if there were none getExceptions() This returns all errors as DatabaseHelper.ResultException type. Signature List<ResultException> getExceptions() Returns list of all errors getId() What is the id value we operated on? Signature Id getId() Returns id value getSObject() Find the record we operated on. Signature SObject getSObject() Returns record getStackTraceStrings() Query a list of stack traces for each exception. Signature List<String> getStackTraceStrings() Returns list of stack traces isCreated() Test this was an insert or an upsert that created a record. Signature Boolean isCreated() Returns true if a new record was created isSuccess() Was the DML successful? Signature Boolean isSuccess() Returns true if success DatabaseHelper.ResultException We use an exception class for error, so we can throw if we want and we can get a stack trace. Signature public class ResultException extends Exception DatabaseHelper.ResultException Properties Name Signature fields public String [] fields ignoreStackTraceString private transient Boolean ignoreStackTraceString message public String message stackTraceString public String stackTraceString statusCode public StatusCode statusCode DatabaseHelper.ResultException Methods getError() getStackTraceString() getError() Signature public Database.Error getError() getStackTraceString() Signature public override String getStackTraceString()"
    },
    {
        "title": "DatabaseHelperQueueable",
        "fileName": "DatabaseHelperQueueable.html",
        "text": "DatabaseHelperQueueable This Class allows recursive dml updates via the queueable interface. @version 2021-10-27 Signature public class DatabaseHelperQueueable implements Queueable Bill C Riemers <briemers@redhat.com>2021-04-28 - Separated from the DatabaseHelper class 2021-10-27 US307550 - Fixed enqueueing multiple dml calls DatabaseHelperQueueable Properties Name Signature databaseHelperQueueableList static List<DatabaseHelperQueueable> databaseHelperQueueableList DatabaseHelperQueueable Constructors DatabaseHelperQueueable(helper, op, recordsList) DatabaseHelperQueueable(helper, op, recordsList) Signature public DatabaseHelperQueueable(        DatabaseHelper helper,        DatabaseHelper.DMLOperation op,        List<List<SObject>> recordsList) DatabaseHelperQueueable Methods enqueueJob(queueableList) enqueueJob() execute(context) enqueueJob(queueableList) Signature @TestVisible static List<DatabaseHelperQueueable> enqueueJob(List<DatabaseHelperQueueable> queueableList) enqueueJob() Signature public void enqueueJob() execute(context) Signature public void execute(QueueableContext context)"
    },
    {
        "title": "DatabaseHelperResult",
        "fileName": "DatabaseHelperResult.html",
        "text": "DatabaseHelperResult This is a class that can use to in leiu of the Database.*Result objects. That way we can add to this set exceptions that were never actually thrown and such. @version 2021-04-28 Signature public class DatabaseHelperResult implements DatabaseHelper.Result Bill C Riemers <briemers@redhat.com>2021-04-28 - Separated from the DatabaseHelper class DatabaseHelperResult Properties Name Signature errors private List<Database.Error> errors exceptions private List<DatabaseHelper.ResultException> exceptions DatabaseHelperResult Constructors DatabaseHelperResult(op, result, record, errors) Constructor DatabaseHelperResult(op, result, record) Constructor DatabaseHelperResult(op, result, record, errors) Constructor Signature public DatabaseHelperResult(DatabaseHelper.DMLOperation op,Object result,SObject record,List<Database.Error> errors) Parameters op Type: DatabaseHelper.DMLOperation the dml statement that was performed result one of Database.SaveResult, Database.UpsertResult,... record the message being operated on DatabaseHelperResult(op, result, record) Constructor Signature public DatabaseHelperResult(DatabaseHelper.DMLOperation op,Exception result,SObject record) Parameters op Type: DatabaseHelper.DMLOperation the dml statement that was performed result one of Database.SaveResult, Database.UpsertResult,... record the message being operated on DatabaseHelperResult Methods convertResult(apexType) convertResultType(op, results, records, legacyMode) getErrors() This returns all errors as Database.Error type. getException() Return just the first exception as DatabaseHelper.ResultException type. getExceptions() This returns all errors as DatabaseHelper.ResultException type. getId() What is the id value we operated on? getId(result) Method to check success with out depending on the type of database results. getSObject() Find the record we operated on. getStackTraceStrings() Query a list of stack traces for each exception. initCause(ex) isCreated() Test this was an insert or an upsert that created a record. isSuccess() Was the DML successful? convertResult(apexType) Signature public Object convertResult(System.Type apexType) convertResultType(op, results, records, legacyMode) Signature public static List<Object> convertResultType(        DatabaseHelper.DMLOperation op,        List<Object> results,        List<SObject> records,        Boolean legacyMode    ) getErrors() This returns all errors as Database.Error type. Signature public List<Database.Error> getErrors() Returns list of all errors getException() Return just the first exception as DatabaseHelper.ResultException type. Signature public DatabaseHelper.ResultException getException() Returns the first exception or null if there were none getExceptions() This returns all errors as DatabaseHelper.ResultException type. Signature public List<DatabaseHelper.ResultException> getExceptions() Returns list of all errors getId() What is the id value we operated on? Signature public Id getId() Returns id value getId(result) Method to check success with out depending on the type of database results. Signature @TestVisible static Id getId(Object result) Parameters result Type: Object from a insert,update,upsert,delete,or undelete Returns id value if assigned getSObject() Find the record we operated on. Signature public SObject getSObject() Returns record getStackTraceStrings() Query a list of stack traces for each exception. Signature public List<String> getStackTraceStrings() Returns list of stack traces initCause(ex) Signature @TestVisible static void initCause(Exception ex) isCreated() Test this was an insert or an upsert that created a record. Signature public Boolean isCreated() Returns true if a new record was created isSuccess() Was the DML successful? Signature public Boolean isSuccess() Returns true if success DatabaseHelperResult.SimpleResult Signature private class SimpleResult DatabaseHelperResult.SimpleResult Constructors SimpleResult(r) SimpleResult(r) Signature SimpleResult(DatabaseHelper.Result r)"
    },
    {
        "title": "DatabaseHelperTest",
        "fileName": "DatabaseHelperTest.html",
        "text": "DatabaseHelperTest Test class for DatabaseHelper. @version 2021-04-27 Signature @IsTest private class DatabaseHelperTest Bill C Riemers <briemers@redhat.com>2020-08-18 US268650 - Created 2021-01-07 US281262 - Added setEnqueueScope for Queuable splitting of dml 2021-03-30 - Increase test coverage 2021-04-27 DE26549 - Added split test DatabaseHelperTest Properties Name Signature CPU_TIME_PATTERN static final Pattern CPU_TIME_PATTERN CPU_TIME_RE static final String CPU_TIME_RE DatabaseHelperTest Methods cpuTimeCheck(actual, message) dmlExceptionTest() dmlOptionsTest() enqueueJobTest() enqueueScopeTest() enqueueScopeTest2() getErrorsTest() safeTest() splitTest() cpuTimeCheck(actual, message) Signature static void cpuTimeCheck(String actual,String message) dmlExceptionTest() Signature @isTest static void dmlExceptionTest() dmlOptionsTest() Signature @isTest static void dmlOptionsTest() enqueueJobTest() Signature @IsTest static void enqueueJobTest() enqueueScopeTest() Signature @isTest static void enqueueScopeTest() enqueueScopeTest2() Signature @isTest static void enqueueScopeTest2() getErrorsTest() Signature @isTest static void getErrorsTest() safeTest() Signature @isTest static void safeTest() splitTest() Signature @isTest static void splitTest()"
    },
    {
        "title": "Field_Map",
        "fileName": "Field_Map.html",
        "text": "Field_Map This class used to copy data from one object to another using Field_Map_Entry__mdt and User_Field_Map_Entry__mdt values @version 2022-08-04 Signature public class Field_Map Bill C Riemers <briemers@redhat.com>2019-11-21 - Created 2019-12-19 - Updated to allow boolean and decimal default values 2020-02-10 US244638 US245940 - Added support for User_Field_Map_Entry__mdt 2020-03-05 US244638 US245940 - Added isDebugging flag 2021-04-06 - Increase test coverage 2021-04-27 - Changes towards depreciated Map_Name__c(picklists are not handled well by unlocked packages) 2022-08-04 SPP-4116 - Added getDestinationEntityMap method Field_Map Properties Name Signature Annotations DEBUG_SETTING public static final String DEBUG_SETTING fieldEntriesBySourceMap private Map<String,List<FieldMapEntry>> fieldEntriesBySourceMap fieldEntriesForTesting public List<Field_Map_Entry__mdt> fieldEntriesForTesting fieldEntriesForTesting2 private List<FieldMapEntry> fieldEntriesForTesting2 @TestVisible fieldEntriesMap private Map<String,List<FieldMapEntry>> fieldEntriesMap @TestVisible isDebugging private final Boolean isDebugging mapName public final String mapName Field_Map Constructors Field_Map(name) Standard constructor. Field_Map(name) Standard constructor. Signature public Field_Map(String name) Parameters name Type: String of the field map Field_Map Methods addAll(targetList, sourceList) addAll(targetList, sourceList) convertText(value, dest, fieldApiName) copyFields(src, dest) Implements special rules for copying fields. copyFields(entityNameMap, dest) Implements special rules for copying fields. getDestinationEntityMap(sourceSObjectType) Create a map of entities we can copy to.  This is useful, if we are planning on inserting brand new objects, or there is a field we can use for upserts. getDestinationFieldNames(prefix, destinationSObjectType) getFieldMapEntriesByDest(dest) getFieldMapEntriesByDest() getFieldMapEntriesBySource(sourceEntityName) getSourceFieldNames(prefix, sourceSObjectType) Obtain all the field names for the specified source, prefixed with the specified string. addAll(targetList, sourceList) Signature static void addAll(List<FieldMapEntry> targetList, final String mapName, List<User_Field_Map_Entry__mdt> sourceList) addAll(targetList, sourceList) Signature static void addAll(List<FieldMapEntry> targetList, final String mapName, List<Field_Map_Entry__mdt> sourceList) convertText(value, dest, fieldApiName) Signature @TestVisible static Object convertText(String value,SObject dest,String fieldApiName) copyFields(src, dest) Implements special rules for copying fields. Signature public List<String> copyFields(SObject src,SObject dest) Parameters src Type: SObject to copy from dest to copy to returns list s Error Messages copyFields(entityNameMap, dest) Implements special rules for copying fields. Signature public List<String> copyFields(Map<String,SObject> entityNameMap, SObject dest) Parameters entityNameMap Type: Map<String,SObject> to use to field values dest Type: SObject to copy to Returns list of Error Messages getDestinationEntityMap(sourceSObjectType) Create a map of entities we can copy to.  This is useful, if we are planning on inserting brand new objects, or there is a field we can use for upserts. Signature public Map<String,SObject> getDestinationEntityMap(SObjectType sourceSObjectType) Parameters sourceSObjectType Type: SObjectType the source object we are mapping from Returns a map of entity qualified api name to a newly created SObject getDestinationFieldNames(prefix, destinationSObjectType) Signature public Set<String> getDestinationFieldNames(String prefix,SObjectType destinationSObjectType) getFieldMapEntriesByDest(dest) Signature private List<FieldMapEntry> getFieldMapEntriesByDest(SObject dest) getFieldMapEntriesByDest() Signature private List<FieldMapEntry> getFieldMapEntriesByDest(final String destinationEntityName) getFieldMapEntriesBySource(sourceEntityName) Signature private List<FieldMapEntry> getFieldMapEntriesBySource( String sourceEntityName ) getSourceFieldNames(prefix, sourceSObjectType) Obtain all the field names for the specified source, prefixed with the specified string. Signature public Set<String> getSourceFieldNames(String prefix,SObjectType sourceSObjectType) Parameters prefix Type: String string to prefix to field names, useful when generating a subquery sourceSObjectType the source SObjectType we are looking for Returns a set of fieldnames prefixed with specified value Field_Map.FieldMapEntry Signature @TestVisible private class FieldMapEntry Field_Map.FieldMapEntry Properties Name Signature Annotations defaultValue private String defaultValue @TestVisible destinationEntityQualifiedApiName private String destinationEntityQualifiedApiName @TestVisible destinationFieldQualifiedApiName private String destinationFieldQualifiedApiName @TestVisible nullable private Boolean nullable @TestVisible overwritable private Boolean overwritable @TestVisible required private Boolean required @TestVisible sequenceNumber private Decimal sequenceNumber @TestVisible sourceEntityQualifiedApiName private String sourceEntityQualifiedApiName @TestVisible sourceFieldQualifiedApiName private String sourceFieldQualifiedApiName @TestVisible Field_Map.FieldMapEntry Constructors FieldMapEntry(sourceEntityQualifiedApiName, sourceFieldQualifiedApiName, destinationEntityQualifiedApiName, destinationFieldQualifiedApiName, defaultValue, nullable, overwritable, required, sequenceNumber) FieldMapEntry(value) FieldMapEntry(value) FieldMapEntry(sourceEntityQualifiedApiName, sourceFieldQualifiedApiName, destinationEntityQualifiedApiName, destinationFieldQualifiedApiName, defaultValue, nullable, overwritable, required, sequenceNumber) Signature FieldMapEntry(            String sourceEntityQualifiedApiName,            String sourceFieldQualifiedApiName,            String destinationEntityQualifiedApiName,            String destinationFieldQualifiedApiName,            String defaultValue,            Boolean nullable,            Boolean overwritable,            Boolean required,            Decimal sequenceNumber ) FieldMapEntry(value) Signature FieldMapEntry(Field_Map_Entry__mdt value) FieldMapEntry(value) Signature FieldMapEntry(User_Field_Map_Entry__mdt value) Field_Map.FieldMapEntry Methods copyField(source, dest, errors) copyField(source, dest, errors) Signature @TestVisible void copyField(SObject source, SObject dest, List<String> errors)"
    },
    {
        "title": "Field_MapTest",
        "fileName": "Field_MapTest.html",
        "text": "Field_MapTest Test class for Field_Map @version 2022-08-04 Signature @isTest public class Field_MapTest Bill C Riemers <briemers@redhat.com>2019-12-19 - Created 2020-03-05 US244638 US245940 - added tests using the user field map 2021-04-06 - Increase test coverage 2022-08-04 - Renamed \"Test_Map\" to \"Test Map\" Field_MapTest Properties Name Signature contactAccountFieldMap static Field_Map contactAccountFieldMap Field_MapTest Methods convertTextTest() copyFieldTest() getDestinationEntityMapTest() getDestinationFieldNamesTest() getSourceFieldNamesTest() testMap() convertTextTest() Signature @isTest static void convertTextTest() copyFieldTest() Signature @isTest static void copyFieldTest() getDestinationEntityMapTest() Signature @isTest static void getDestinationEntityMapTest() getDestinationFieldNamesTest() Signature @isTest static void getDestinationFieldNamesTest() getSourceFieldNamesTest() Signature @isTest static void getSourceFieldNamesTest() testMap() Signature @isTest static void testMap()"
    },
    {
        "title": "LimitHelper",
        "fileName": "LimitHelper.html",
        "text": "LimitHelper This Class implements some useful limit utilities.  One example on how to use this call is you write your trigger methods to look something like: <pre> public void salesAccountUpdate() { try { if(newList.size() > 1) { LimitHelper.push(SALES_ACCOUNT_UPDATE_SETTING); } ... } catch(LimitHelper.LimitsException ex) { ... } finally { if(newList.size() > 1) { LimitHelper.pop(SALES_ACCOUNT_UPDATE_SETTING); } } } </pre> The catch exception or an after trigger is where you can add code to use deferred processing to handle one record at the time so you do not hit the limits. The LimitHelper name you are pushing and poping is the master label of the Limit Reserves metadata type record that defines what how much time you reserving. Then in order for this code to work there needs to be calls to the LimitHepler class to check the limits periodically.  For example, immediately before a query you could call: <pre>(new LimitHelper()).setQueries(1).checkLimits( null); </pre> This is saying check the limits and make sure we have one query available beyound the reserve.  If we do not either return an Exception or throw an exception.  The null argument is the boolean that tells the helper if it should throw the exception.  If you pass true, it will throw the exception.  If you pass false, it will return the exception. Using a null value is equivalent to: <pre>(new LimitHelper()).setQueries(1).checkLimits( LimitHelper.throwsExceptionDefault ); </pre> There are a series of DatabaseHelper.safe* methods that can be used to automatically check the limits when performing DML operations.  e.g. <pre> for(DatabaseHelper.Result r : new DatabaseHelper().safeInsert(insertList)) { if(r.isSuccess()) { ... } } </pre> By default we are checking a whole bunch of limits each time, but there are static methods in the LimitHelper class for checking individual limits. @version 2020-08-13 Signature public without sharing class LimitHelper Bill C Riemers <briemers@redhat.com>2020-08-13 US266008 - Created 2021-04-28 - Add queueable jobs limits check LimitHelper Properties Name Signature Annotations Description cpuTime private Integer cpuTime cpuTimeReserved public static Integer cpuTimeReserved Since CPU checks are not regularly called you should probably reserve at least 100 ms in order for this to work.  A negative value deactivates this check. dmlRows private Integer dmlRows dmlRowsReserved public static Integer dmlRowsReserved You can specify exactly the number of rows you want to reserve.  A negative value will deactivate this check. dmlStatements private Integer dmlStatements dmlStatementsReserved public static Integer dmlStatementsReserved You can specify exactly the number of statements you want to reserve.  A negative value will deactivate this check. queries private Integer queries queriesReserved public static Integer queriesReserved You can specify exactly the number of queries you want to reserve.  A negative value will deactivate this check. queueableJobs private Integer queueableJobs queueableJobsReserved public static Integer queueableJobsReserved You can specify exactly the number of queueableJobs you want to reserve.  A negative value will deactivate this check. reservedList private static List<Object> reservedList @TestVisible throwsExceptionDefault public static Boolean throwsExceptionDefault This is basically a setting to determine if checks will throw an exception when the throwsException flag is null.  We initialise this to false so the checks can safely be added to triggers that cannot properly deal with the exception from all places dml is performed, and activated by code that can support the exceptions. LimitHelper Methods checkLimitCPUTime(cpuTimeRequired, throwsException) Called to check just the cpu time limit. checkLimitDMLRows(dmlRowsRequired, throwsException) Called to check just the dml row limit. checkLimitDMLStatements(dmlStatementsRequired, throwsException) Called to check just the dml statements limit. checkLimitQueries(queriesRequired, throwsException) Called to check just the dml statements limit. checkLimitQueueableJobs(queueableJobsRequired, throwsException) Called to check just the queueable jobs limit. checkLimits(throwsException) Check all the assigned limit values. createLimitsMessage(limitString, requiredValue, allowedValue, throwsException) pop(masterLabel) Unreserve the values specified by Limit_Reserve__mdt givin my the masterLabel.  If other values have been reserved as well afterwards, pop those values as well. push(masterLabel) Reserve the values specified by Limit_Reserve__mdt givin my the masterLabel setCpuTime(value) Set how much cpu time is needed for the next call. setDmlRows(value) Set how many dml rows are needed for the next call? setDmlStatements(value) Set how many dml statements are needed for the next call? setQueries(value) Set how many queries are needed for the next call? setQueueableJobs(value) Set how many queueableJobs are needed for the next call? checkLimitCPUTime(cpuTimeRequired, throwsException) Called to check just the cpu time limit. Signature public static String checkLimitCPUTime(Integer cpuTimeRequired,Boolean throwsException) Parameters cpuTimeRequired Type: Integer throwsException a null is equivalent to throwsExceptionDefault checkLimitDMLRows(dmlRowsRequired, throwsException) Called to check just the dml row limit. Signature public static String checkLimitDMLRows(Integer dmlRowsRequired,Boolean throwsException) Parameters dmlRowsRequired Type: Integer throwsException a null is equivalent to throwsExceptionDefault checkLimitDMLStatements(dmlStatementsRequired, throwsException) Called to check just the dml statements limit. Signature public static String checkLimitDMLStatements(Integer dmlStatementsRequired,Boolean throwsException) Parameters dmlStatementsRequired Type: Integer throwsException a null is equivalent to throwsExceptionDefault checkLimitQueries(queriesRequired, throwsException) Called to check just the dml statements limit. Signature public static String checkLimitQueries(Integer queriesRequired,Boolean throwsException) Parameters queriesRequired Type: Integer throwsException a null is equivalent to throwsExceptionDefault checkLimitQueueableJobs(queueableJobsRequired, throwsException) Called to check just the queueable jobs limit. Signature public static String checkLimitQueueableJobs(Integer queueableJobsRequired,Boolean throwsException) Parameters queueableJobsRequired Type: Integer throwsException a null is equivalent to throwsExceptionDefault checkLimits(throwsException) Check all the assigned limit values. Signature public String checkLimits(Boolean throwsException) Parameters throwsException Type: Boolean a null is equivalent to throwsExceptionDefault createLimitsMessage(limitString, requiredValue, allowedValue, throwsException) Signature private static String createLimitsMessage(        String limitString,        Object requiredValue,        Object allowedValue,        Boolean throwsException    ) pop(masterLabel) Unreserve the values specified by Limit_Reserve__mdt givin my the masterLabel.  If other values have been reserved as well afterwards, pop those values as well. Signature public static void pop(String masterLabel) Parameters masterLabel Type: String push(masterLabel) Reserve the values specified by Limit_Reserve__mdt givin my the masterLabel Signature public static void push(String masterLabel) Parameters masterLabel Type: String setCpuTime(value) Set how much cpu time is needed for the next call. Signature public LimitHelper setCpuTime(Integer value) Parameters value Type: Integer Returns this setDmlRows(value) Set how many dml rows are needed for the next call? Signature public LimitHelper setDmlRows(Integer value) Parameters value Type: Integer Returns this setDmlStatements(value) Set how many dml statements are needed for the next call? Signature public LimitHelper setDmlStatements(Integer value) Parameters value Type: Integer Returns this setQueries(value) Set how many queries are needed for the next call? Signature public LimitHelper setQueries(Integer value) Parameters value Type: Integer Returns this setQueueableJobs(value) Set how many queueableJobs are needed for the next call? Signature public LimitHelper setQueueableJobs(Integer value) Parameters value Type: Integer Returns this LimitHelper.LimitsException Exception for a limit check failure. Signature public class LimitsException extends Exception"
    },
    {
        "title": "LimitHelperTest",
        "fileName": "LimitHelperTest.html",
        "text": "LimitHelperTest This is a test class for LimitHelper. @version 2021-04-28 Signature @IsTest private class LimitHelperTest Bill C Riemers <briemers@redhat.com>2020-08-18 US268650 - Created 2021-04-28 - Add queueableJobs limits check LimitHelperTest Properties Name Signature limitReserveMap static Map<String,Limit_Reserve__mdt> limitReserveMap LimitHelperTest Methods checkLimitsCpuTimeTest() checkLimitsDmlRowsTest() checkLimitsDmlStatementsTest() checkLimitsQueriesTest() checkLimitsQueueableJobsTest() cpuTimeTest() dmlRowsTest() dmlStatementsTest() pushPopTest() queriesTest() queueableJobsTest() checkLimitsCpuTimeTest() Signature @isTest static void checkLimitsCpuTimeTest() checkLimitsDmlRowsTest() Signature @isTest static void checkLimitsDmlRowsTest() checkLimitsDmlStatementsTest() Signature @isTest static void checkLimitsDmlStatementsTest() checkLimitsQueriesTest() Signature @isTest static void checkLimitsQueriesTest() checkLimitsQueueableJobsTest() Signature @isTest static void checkLimitsQueueableJobsTest() cpuTimeTest() Signature @isTest static void cpuTimeTest() dmlRowsTest() Signature @isTest static void dmlRowsTest() dmlStatementsTest() Signature @isTest static void dmlStatementsTest() pushPopTest() Signature @isTest static void pushPopTest() queriesTest() Signature @isTest static void queriesTest() queueableJobsTest() Signature @isTest static void queueableJobsTest()"
    },
    {
        "title": "Metadata_Values_Helper",
        "fileName": "Metadata_Values_Helper.html",
        "text": "Metadata_Values_Helper This is a set of utilities for treating simple metadata a a map. @version 2020-12-03 Signature public without sharing class Metadata_Values_Helper Bill Riemers <briemers@redhat.com>2020-08-26 US268900 - Created as part of PQI approval implementation 2020-12-03 - Added factory method Metadata_Values_Helper Properties Name Signature Description decimal2Map public Map<String,Decimal> decimal2Map This is the map of data obtained from the Decimal2_Values__mdt table. metadataValuesHelperMap private static Map<String,Metadata_Values_Helper> metadataValuesHelperMap source private final String source stringMap public Map<String,String> stringMap This is the map of data obtained from the String_Values__mdt table. Metadata_Values_Helper Constructors Metadata_Values_Helper(source) Constructor Metadata_Values_Helper(source) Constructor Signature public Metadata_Values_Helper(String source) Parameters source Type: String Metadata_Values_Helper Methods getDecimal2Map(source) Query the map from the Decimal2_Values__mdt table. getMetadataValuesHelper(source) Factory method to get a metadata value helper. getStringMap(source) Query the map from the String_Values__mdt table. getDecimal2Map(source) Query the map from the Decimal2_Values__mdt table. Signature public static Map<String,Decimal> getDecimal2Map(String source) Parameters source Type: String Returns map getMetadataValuesHelper(source) Factory method to get a metadata value helper. Signature public static Metadata_Values_Helper getMetadataValuesHelper(String source) Parameters source Type: String Returns the metadata value helper getStringMap(source) Query the map from the String_Values__mdt table. Signature public static Map<String,String> getStringMap(String source) Parameters source Type: String Returns map"
    },
    {
        "title": "Metadata_Values_HelperTest",
        "fileName": "Metadata_Values_HelperTest.html",
        "text": "Metadata_Values_HelperTest Test class for Metadata Values Helper @version 2020-12-01 Signature @IsTest private class Metadata_Values_HelperTest Bill C Riemers <briemers@redhat.com>2020-08-27 US268903 - Created 2020-12-01 - Added test methods for boolean values Metadata_Values_HelperTest Properties Name Signature helper static Metadata_Values_Helper helper Metadata_Values_HelperTest Methods decimal2ValuesTest() stringValuesTest() decimal2ValuesTest() Signature @IsTest static void decimal2ValuesTest() stringValuesTest() Signature @IsTest static void stringValuesTest()"
    },
    {
        "title": "SObjectCallableTrigger",
        "fileName": "SObjectCallableTrigger.html",
        "text": "SObjectCallableTrigger This is mainly intended as a sample callable trigger class. If we have core trigger functionality we want to span across many SObject types, this the the class to implement it in. @version 2020-11-17 Signature class SObjectCallableTrigger Bill Riemers <briemers@redhat.com>2020-11-17 - Created SObjectCallableTrigger Constructors SObjectCallableTrigger() Standard constructor. SObjectCallableTrigger() Standard constructor. Signature public SObjectCallableTrigger() SObjectCallableTrigger Methods assignLegacy(newList) Copy the ownerId to a custom look-up field. This is a trigger method we use on many object types. So we might as define it here.  This method will only work in before triggers. It does not make sense to call this method if the SObject does not have both an OwnerId field and a Owner__c field. assignLegacy() Copy the ownerId to a custom look-up field. This is a trigger method we use on many object types. So we might as define it here.  This method will only work in before triggers. It does not make sense to call this method if the SObject does not have both an OwnerId field and a Owner__c field. call(action, args) This is the callable method to invoke the triggers in this class. assignLegacy(newList) Copy the ownerId to a custom look-up field. This is a trigger method we use on many object types. So we might as define it here.  This method will only work in before triggers. It does not make sense to call this method if the SObject does not have both an OwnerId field and a Owner__c field. Signature public static void assignLegacy(List<SObject> newList) Parameters newList Type: List<SObject> of objects to update assignLegacy() Copy the ownerId to a custom look-up field. This is a trigger method we use on many object types. So we might as define it here.  This method will only work in before triggers. It does not make sense to call this method if the SObject does not have both an OwnerId field and a Owner__c field. Signature public void assignLegacy() call(action, args) This is the callable method to invoke the triggers in this class. Signature public Object call(String action, Map<String,Object> args) Parameters action Type: String the trigger method to invoke args Type: Map<String,Object> a map of Trigger values SObjectCallableTrigger.ExtensionMalformedCallException Signature public class ExtensionMalformedCallException extends Exception"
    },
    {
        "title": "SObjectCallableTriggerTest",
        "fileName": "SObjectCallableTriggerTest.html",
        "text": "SObjectCallableTriggerTest This is mainly intended as a sample callable trigger class. If we have core trigger functionality we want to span across many SObject types, this the the class to implement it in. @version 2020-11-17 Signature @isTest private class SObjectCallableTriggerTest Bill Riemers <briemers@redhat.com>2020-11-17 - Created SObjectCallableTriggerTest Methods assignLegacyNegativeTest() assignLegacyTest() callExceptionTest() assignLegacyNegativeTest() Signature @isTest static void assignLegacyNegativeTest() assignLegacyTest() Signature @isTest static void assignLegacyTest() callExceptionTest() Signature @isTest static void callExceptionTest()"
    },
    {
        "title": "ThreadLock",
        "fileName": "ThreadLock.html",
        "text": "ThreadLock This is a class for thread locking.   The normal usage is: <pre> final String MY_THREAD_KEY = '<<<This is a unique value.>>>'; if(ThreadLock.lock(MY_THREAD_KEY)) { try { // do some work } finally { ThreadLock.unlock(MY_THREAD_KEY); } } </pre> @version 2020-09-04 Signature public class ThreadLock Mark Smith <masmith@redhat.com> Bill C Riemers <briemers@redhat.com>2013-01-04 Created 2020-09-04 US270544 - Added comments, switched to a private set from a public map ThreadLock Properties Name Signature Description resourceLocks private static Set<String> resourceLocks We just us a set for our resource locking... ThreadLock Methods isLocked(key) Check to see if the lock has been obtained somewhere. lock(key) Attempt to establish the lock. unlock(key) Unlock a thread. isLocked(key) Check to see if the lock has been obtained somewhere. Signature public static Boolean isLocked(String key) Parameters key Type: String Returns true if locked lock(key) Attempt to establish the lock. Signature public static Boolean lock(String key) Parameters key Type: String Returns true if lock is obtained, false if already locked unlock(key) Unlock a thread. Signature public static Boolean unlock(String key) Parameters key Type: String Returns false if not initially locked"
    },
    {
        "title": "ThreadLockTest",
        "fileName": "ThreadLockTest.html",
        "text": "ThreadLockTest Test class for ThreadLock @version 2020-09-04 Signature @IsTest private class ThreadLockTest Bill C Riemers <briemers@redhat.com>2020-09-04 US270544 - Created ThreadLockTest Properties Name Signature KEY1 static final String KEY1 KEY2 static final String KEY2 ThreadLockTest Methods lockAndUnlockTest() lockAndUnlockTest() Signature @IsTest static void lockAndUnlockTest()"
    },
    {
        "title": "TriggerArguments",
        "fileName": "TriggerArguments.html",
        "text": "TriggerArguments This is a class to convert callable arguments into trigger values. All values are assigned in the constructor as final. The following are minimum arguments key sets for the arguments of the triggers: <pre> before insert : { NEW_LIST_KEY } before update : { OLD_MAP_KEY, NEW_LIST_KEY } before delete : { OLD_MAP_KEY, IS_BEFORE_KEY } after insert : { NEW_MAP_KEY } after update : { OLD_MAP_KEY, NEW_MAP_KEY } after delete : { OLD_MAP_KEY, IS_BEFORE_KEY } after undelete : { NEW_MAP_KEY, IS_UNDELETE_KEY } </pre> Given the minimal sets, the rest of the values will be populated for each of the trigger types.  In general never supply NEW_MAP_KEY for a before trigger without specifing the IS_BEFORE_KEY or IS_AFTER_KEY.   Never provide NEW_LIST_KEY in an after trigger, without also supplying IS_BEFORE_KEY or IS_AFTER_KEY. Treat all memember variables of this class as final.  If you need to change the values you should create a new instance with one of the static create methods. @version 2022-08-10 Signature @SuppressWarnings('PMD.ExcessivePublicCount') public without sharing class TriggerArguments Bill C Riemers <briemers@redhat.com>2020-11-12 Created 2022-08-09 Support operationType 2022-08-10 Refactored to resolve most PMD warnings TriggerArguments Properties Name Signature Description CALLABLE_MAP public static final String CALLABLE_MAP callableArguments public final Map<String,Object> callableArguments The map of arguments representing Trigger that can be passed to a Callable trigger class. callableMap public final Map<String,Callable> callableMap The map of all callable triggers called so far as part of the current DML operation. IS_AFTER_KEY public static final String IS_AFTER_KEY IS_BEFORE_KEY public static final String IS_BEFORE_KEY IS_DELETE_KEY public static final String IS_DELETE_KEY IS_INSERT_KEY public static final String IS_INSERT_KEY IS_UNDELETE_KEY public static final String IS_UNDELETE_KEY IS_UPDATE_KEY public static final String IS_UPDATE_KEY isAfter public Boolean isAfter IS_AFTER_KEY value from the callable arguments map. isBefore public Boolean isBefore IS_BEFORE_KEY value from the callable arguments map. isDelete public Boolean isDelete IS_DELETE_KEY value from the callable arguments map. isInsert public Boolean isInsert IS_INSERT_KEY value from the callable arguments map. isUndelete public Boolean isUndelete IS_UNDELETE_KEY value from the callable arguments map. isUpdate public Boolean isUpdate IS_UPDATE_KEY value from the callable arguments map. NEW_LIST_KEY public static final String NEW_LIST_KEY NEW_MAP_KEY public static final String NEW_MAP_KEY newList public List<SObject> newList NEW_LIST_KEY value from the callable arguments map. newMap public Map<Id,SObject> newMap NEW_MAP_KEY value from the callable arguments map. OLD_LIST_KEY public static final String OLD_LIST_KEY OLD_MAP_KEY public static final String OLD_MAP_KEY oldList public List<SObject> oldList OLD_LIST_KEY value from the callable arguments map. oldMap public Map<Id,SObject> oldMap OLD_MAP_KEY value from the callable arguments map. OPERATION_TYPE_KEY public static final String OPERATION_TYPE_KEY operationType public final System.TriggerOperation operationType OPERATION_TYPE_KEY value from the callable arguments map. set private set set private set set private set TARGET_OBJECT_TYPE_KEY public static final String TARGET_OBJECT_TYPE_KEY targetObjectType public String targetObjectType TARGET_OBJECT_KEY value from the callabse arguments map. TriggerType public Enum TriggerType triggerTypeValue public TriggerType triggerTypeValue The trigger type of this call. TriggerArguments Constructors TriggerArguments(callableArguments) Constructor.  A null or empty map will construct using Trigger values. Any missing values in a non-empty map will be filled in with values determined in the setter methods. TriggerArguments() TriggerArguments() TriggerArguments() TriggerArguments() TriggerArguments() TriggerArguments() TriggerArguments() TriggerArguments(callableArguments) Constructor.  A null or empty map will construct using Trigger values. Any missing values in a non-empty map will be filled in with values determined in the setter methods. Signature public TriggerArguments(Map<String,Object> callableArguments) Parameters callableArguments Type: Map<String,Object> map of trigger values, or null TriggerArguments() Signature return new TriggerArguments(callableArguments) TriggerArguments() Signature return new TriggerArguments(callableArguments) TriggerArguments() Signature return new TriggerArguments(callableArguments) TriggerArguments() Signature return new TriggerArguments(callableArguments) TriggerArguments() Signature return new TriggerArguments(callableArguments) TriggerArguments() Signature return new TriggerArguments(callableArguments) TriggerArguments() Signature return new TriggerArguments(callableArguments) TriggerArguments Methods assignMaps() assignMissingFlags() createAfterDelete(oldMap) Create trigger arguments for after delete event. createAfterInsert(newMap) Create trigger arguments for aafter insert trigger event. createAfterUndelete(newMap) Create trigger arguments for after undelete event. createAfterUpdate(oldMap, newMap) Create trigger arguments for after update trigger event. createBeforeDelete(oldMap) Create trigger arguments for before delete event. createBeforeInsert(newList) Create trigger arguments for a before insert trigger event. createBeforeUpdate(oldMap, newList) Create trigger arguments for before update trigger event. getNewValue(recordId) Get the object from the newMap.  Using this method leads to more streamlined code. getOldValue(recordId) Get the object from the oldMap.  Using this method leads to more streamlined code. getSizeScore(key) getSObjectList(listKey, refMap) getSObjectMap(retval, mapToClone, values) initializeFromOperationType(operationType) syncToMap() assignMaps() Signature private void assignMaps() assignMissingFlags() Signature private void assignMissingFlags() createAfterDelete(oldMap) Create trigger arguments for after delete event. Signature public static TriggerArguments createAfterDelete(Map<Id,SObject> oldMap) Parameters oldMap Type: Map<Id,SObject> Returns triggerArguments createAfterInsert(newMap) Create trigger arguments for aafter insert trigger event. Signature public static TriggerArguments createAfterInsert(Map<Id,SObject> newMap) Parameters newMap Type: Map<Id,SObject> Returns triggerArguments createAfterUndelete(newMap) Create trigger arguments for after undelete event. Signature public static TriggerArguments createAfterUndelete(Map<Id,SObject> newMap) Parameters newMap Type: Map<Id,SObject> Returns triggerArguments createAfterUpdate(oldMap, newMap) Create trigger arguments for after update trigger event. Signature public static TriggerArguments createAfterUpdate(Map<Id,SObject> oldMap,Map<Id,SObject> newMap) Parameters oldMap Type: Map<Id,SObject> newMap Returns triggerArguments createBeforeDelete(oldMap) Create trigger arguments for before delete event. Signature public static TriggerArguments createBeforeDelete(Map<Id,SObject> oldMap) Parameters oldMap Type: Map<Id,SObject> Returns triggerArguments createBeforeInsert(newList) Create trigger arguments for a before insert trigger event. Signature public static TriggerArguments createBeforeInsert(List<SObject> newList) Parameters newList Type: List<SObject> Returns triggerArguments createBeforeUpdate(oldMap, newList) Create trigger arguments for before update trigger event. Signature public static TriggerArguments createBeforeUpdate(Map<Id,SObject> oldMap,List<SObject> newList) Parameters oldMap Type: Map<Id,SObject> newMap Returns triggerArguments getNewValue(recordId) Get the object from the newMap.  Using this method leads to more streamlined code. Signature public SObject getNewValue(Id recordId) Parameters recordId Type: Id Returns record from newMap getOldValue(recordId) Get the object from the oldMap.  Using this method leads to more streamlined code. Signature public SObject getOldValue(Id recordId) Parameters recordId Type: Id Returns record from oldMap getSizeScore(key) Signature private Integer getSizeScore(String key) getSObjectList(listKey, refMap) Signature private List<SObject> getSObjectList(String listKey,Map<Id,SObject> refMap) getSObjectMap(retval, mapToClone, values) Signature @TestVisible private static Map<Id,SObject> getSObjectMap(Map<Id,SObject> retval,Map<Id,SObject> mapToClone,List<SObject> values) initializeFromOperationType(operationType) Signature private void initializeFromOperationType(System.TriggerOperation operationType) syncToMap() Signature private void syncToMap()"
    },
    {
        "title": "TriggerArgumentsTest",
        "fileName": "TriggerArgumentsTest.html",
        "text": "TriggerArgumentsTest This is a class for TriggerArguments All values are assigned in the constructor as final. @version 2020-11-12 Signature @isTest public class TriggerArgumentsTest Bill C Riemers <briemers@redhat.com>2020-11-12 Created TriggerArgumentsTest Properties Name Signature newList static List<User> newList newMap static Map<Id,User> newMap oldList static List<User> oldList oldMap static Map<Id,User> oldMap users static List<User> users TriggerArgumentsTest Methods afterDeleteTest() afterInsertTest() afterUndeleteTest() afterUpdateTest() afterUpdateTest2() beforeDeleteTest() beforeInsertTest() beforeUpdateTest() beforeUpdateTest2() createArgs(trigType) dummyTriggerTest() getSObjectMapTest() afterDeleteTest() Signature @isTest static void afterDeleteTest() afterInsertTest() Signature @isTest static void afterInsertTest() afterUndeleteTest() Signature @isTest static void afterUndeleteTest() afterUpdateTest() Signature @isTest static void afterUpdateTest() afterUpdateTest2() Signature @isTest static void afterUpdateTest2() beforeDeleteTest() Signature @isTest static void beforeDeleteTest() beforeInsertTest() Signature @isTest static void beforeInsertTest() beforeUpdateTest() Signature @isTest static void beforeUpdateTest() beforeUpdateTest2() Signature @isTest static void beforeUpdateTest2() createArgs(trigType) Signature public static Map<String,Object> createArgs(TriggerArguments.TriggerType trigType ) dummyTriggerTest() Signature @isTest static void dummyTriggerTest() getSObjectMapTest() Signature @isTest static void getSObjectMapTest()"
    },
    {
        "title": "TriggerManagement",
        "fileName": "TriggerManagement.html",
        "text": "TriggerManagement This is a class to invoke triggers in the specified order.  This is intended to be called from a trigger.  A simple implementation would be: <pre> trigger MyTrigger on MyObject(before insert, before update, before delete, after insert, after update, after delete, after undelete) { new TriggerManagement().call('MyTrigger',null); } </pre> Note: The depreciated AbstractTrigger method will make this type of call automatically when invoked from a trigger, so there is no need to add this trigger to standard objects using an AbstractTrigger method calling all the trigger event types you need. An SObjectCallableTrigger can be referenced as an example of how to write your callable trigger. If instead you are invoke this from an unlocked package that does not have a depency to include the TriggerManagement class, you can use reflection to implement your trigger and trigger class.   An example of this will be added to the DailyScheduler package. @version 2021-03-30 Signature public without sharing class TriggerManagement implements Callable Bill C Riemers <briemers@redhat.com>2020-11-12 - Created 2020-12-03 - Use BooleanValuesHelper instead of AbstractTrigger for boolean values 2021-01-29 - Ignore malformed call exceptions if not in a test class 2021-02-11 - Check for custom classes includes __?, not just __c 2021-02-11 - Add the callableMap is now added into the callableArguments 2021-02-11 - Added lastCaughtException 2021-02-14 DE25830 - Read the Boolean Metadata from the correct helper 2021-03-03 US286760 - Add support for multiple listeners on a platform event 2021-03-30 - Increase test coverage TriggerManagement Properties Name Signature Annotations Description entriesMapMap static Map<String,Map<String,List<Trigger_Management_Entry__mdt>>> entriesMapMap lastActionMap static Map<String,String> lastActionMap lastRethrownException public static Exception lastRethrownException This is a way to reach in and grab the exception from the last DML operation. nonEntities static Set<String> nonEntities triggerFieldMap static Map<TriggerArguments.TriggerType,Schema.SObjectField> triggerFieldMap @TestVisible TriggerManagement Constructors TriggerManagement() Standard constructor. TriggerManagement() Standard constructor. Signature public TriggerManagement() TriggerManagement Methods call(action, args) Method to invoke all trigger methods on an object. callTrigger(callableMap, entry, callableArguments) callTrigger(c, action, callableArguments) callTriggerMethods(entries, localTrigger) createQueryString(action, localTrigger) getEntityBasedCondition(nonEntityValue, targetObjectType, entityObjectFieldName, action) getNonEntityValue(objectType) getUniqueTriggerString(retval) getValueFromMetadata(name, defaultValue) queryEntriesByEntity(queryString, targetObjectType) quoteValue(value) call(action, args) Method to invoke all trigger methods on an object. Signature public Object call(String action, Map<String, Object> args) callTrigger(callableMap, entry, callableArguments) Signature static void callTrigger(        Map<String,Callable> callableMap,        Trigger_Management_Entry__mdt entry,        Map<String,Object> callableArguments    ) callTrigger(c, action, callableArguments) Signature static void callTrigger(        Callable c,         String action,         Map<String,Object> callableArguments    ) callTriggerMethods(entries, localTrigger) Signature static void callTriggerMethods(List<Trigger_Management_Entry__mdt> entries,TriggerArguments localTrigger) createQueryString(action, localTrigger) Signature @TestVisible static String createQueryString(String action,TriggerArguments localTrigger) getEntityBasedCondition(nonEntityValue, targetObjectType, entityObjectFieldName, action) Signature static String getEntityBasedCondition(        String nonEntityValue,        String targetObjectType,        String entityObjectFieldName,        String action ) getNonEntityValue(objectType) Signature @TestVisible static String getNonEntityValue(String objectType) getUniqueTriggerString(retval) Signature @TestVisible static String getUniqueTriggerString(String retval) getValueFromMetadata(name, defaultValue) Signature @TestVisible static Boolean getValueFromMetadata(String name,Boolean defaultValue) queryEntriesByEntity(queryString, targetObjectType) Signature static List<Trigger_Management_Entry__mdt> queryEntriesByEntity(String queryString,String targetObjectType) quoteValue(value) Signature static String quoteValue(String value) TriggerManagement.ExtensionMalformedCallException Signature public class ExtensionMalformedCallException extends Exception"
    },
    {
        "title": "TriggerManagementTest",
        "fileName": "TriggerManagementTest.html",
        "text": "TriggerManagementTest This is a test class for TriggerManagement. @version 2021-03-30 Signature @isTest public class TriggerManagementTest implements Callable Bill C Riemers <briemers@redhat.com>2020-11-15 Created 2021-01-29 Added callTriggerTest 2021-02-14 DE25830 - Test with actual boolean metadata 2021-03-30 - Increase test coverage TriggerManagementTest Properties Name Signature malformedCount static Integer malformedCount triggerArgumentsValue static TriggerArguments triggerArgumentsValue TriggerManagementTest Constructors TriggerManagementTest() Standard constructor. TriggerManagementTest() Standard constructor. Signature public TriggerManagementTest() TriggerManagementTest Methods attachmentTest() call(action, args) Method to invoke all trigger methods on an object. callTest() callTriggerTest() callTriggerTest2() getEntityBaseConditionTest() getNonEntityValueTest() getUniqueTriggerString() TriggerManagement.callTrigger(TriggerManagementTest() TriggerManagement.callTrigger(TriggerManagementTest() TriggerManagement.callTrigger(TriggerManagementTest() TriggerManagement.callTrigger(TriggerManagementTest() attachmentTest() Signature @isTest static void attachmentTest() call(action, args) Method to invoke all trigger methods on an object. Signature public Object call(String action, Map<String, Object> args) callTest() Signature @isTest static void callTest() callTriggerTest() Signature @isTest static void callTriggerTest() callTriggerTest2() Signature @isTest static void callTriggerTest2() getEntityBaseConditionTest() Signature @isTest static void getEntityBaseConditionTest() getNonEntityValueTest() Signature @isTest static void getNonEntityValueTest() getUniqueTriggerString() Signature @isTest static void getUniqueTriggerString() TriggerManagement.callTrigger(TriggerManagementTest() Signature TriggerManagement.callTrigger(new TriggerManagementTest(),'TEST.TRUE-KEY1',new Map<String,Object>()) TriggerManagement.callTrigger(TriggerManagementTest() Signature TriggerManagement.callTrigger(new TriggerManagementTest(),'malformed',new Map<String,Object>()) TriggerManagement.callTrigger(TriggerManagementTest() Signature TriggerManagement.callTrigger(new TriggerManagementTest(),'TEST.FALSE-KEY1',new Map<String,Object>()) TriggerManagement.callTrigger(TriggerManagementTest() Signature TriggerManagement.callTrigger(new TriggerManagementTest(),'exception',new Map<String,Object>()) TriggerManagementTest.ExtensionMalformedCallException Signature public class ExtensionMalformedCallException extends Exception"
    }
];
